# -*- coding: utf-8 -*-
"""XLNetforSeqClass_Skorch_implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MqFfXg7tcse3hvy3hy9O8HNu3y6loaZs

Code adapted from [this tutorial](https://mccormickml.com/2019/09/19/XLNet-fine-tuning/)

XLNet repo [here](https://github.com/zihangdai/xlnet)
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
from sklearn.model_selection import train_test_split
from tqdm import tqdm, trange
import tensorflow as tf
import torch
import pandas as pd
import numpy as np
import time
import datetime
import random
import torch.nn.functional as F

# If there's a GPU available...
if torch.cuda.is_available():

    # Tell PyTorch to use the GPU.
    device = torch.device("cuda")

    print('There are %d GPU(s) available.' % torch.cuda.device_count())

    print('We will use the GPU:', torch.cuda.get_device_name(0))

# If not...
else:
    print('No GPU available, using the CPU instead.')
    device = torch.device("cpu")

#Load data and apply polarity rule
from pathlib import Path

data_path = str(Path(__file__).parent / "../Data")
mturk_abstracts = pd.read_csv(data_path + "/mturk_train.csv")

#Polarity rule: If >=2 positive ratings, then label positive
mturk_abstracts['polarity'] = (mturk_abstracts['count_pos'] >= 2).astype(int)

abstracts = mturk_abstracts['inputtext'].tolist()
labels = mturk_abstracts['polarity'].tolist()

assert len(abstracts) == len(labels)

"""We will use the large XLNet pretrained model given its superior performance on SST2 Binary Classification. http://nlpprogress.com/english/sentiment_analysis.html"""

#Load XLNet tokenizer
from transformers import XLNetTokenizer

print("Loading XLNet tokenizer...")
tokenizer = XLNetTokenizer.from_pretrained('xlnet-large-cased', do_lower_case=True)

from tensorflow.keras.preprocessing.sequence import pad_sequences
#Encode abstracts, set truncation and padding
#Sentences need to be end-padded for XLNet
def preProcess(max_len, abstracts, labels):
    abstracts = [ab + " [SEP] [CLS]" for ab in abstracts]

    #Tokenize
    abs_tokens = [tokenizer.tokenize(ab) for ab in abstracts]

    #Encode tokens
    encoded_ids = [tokenizer.convert_tokens_to_ids(x) for x in abs_tokens]
    MAX_LEN = max([len(x) for x in encoded_ids]) #Check max tokenized length
    print("Maximum id vector found: {}".format(MAX_LEN))

    #If longer than MAX_LEN ids, take first and last MAX_LEN//2
    print("Middle-out truncating tokens to length {}".format(max_len))
    truncated_ids = [x[:max_len//2] + x[-max_len//2:] if len(x) > max_len else x for x in encoded_ids]

    for x in truncated_ids:
        if len(x) > max_len:
            print("Found inconsistent length {}".format(len(x)))
            print(x)

    #Need standardized input lengths - pad to maximum length encoded vector
    input_ids = pad_sequences(truncated_ids, maxlen = max_len, dtype = "long", truncating ="pre", padding = "post", value = 0)

    #Create attention masks
    attention_masks = []
    for seq in input_ids:
      seq_mask = [float(i>0) for i in seq]
      attention_masks.append(seq_mask)

    #Split out test and training sets
    train_inputs, validation_inputs, train_labels, validation_labels = train_test_split(input_ids, labels,
                                                                random_state=1, test_size=0.1)
    train_masks, validation_masks, _, _ = train_test_split(attention_masks, input_ids,
                                                 random_state=1, test_size=0.1)

    #Convert to tensors
    train_inputs = torch.tensor(train_inputs)
    validation_inputs = torch.tensor(validation_inputs)
    train_labels = torch.tensor(train_labels)
    validation_labels = torch.tensor(validation_labels)
    train_masks = torch.tensor(train_masks)
    validation_masks = torch.tensor(validation_masks)

    return train_inputs, validation_inputs, train_labels, validation_labels, train_masks, validation_masks

from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler

#Create dataloaders
def loadData(batch_size, train_inputs, validation_inputs, train_labels, validation_labels, train_masks, validation_masks):
    train_data = TensorDataset(train_inputs, train_masks, train_labels)
    train_sampler = RandomSampler(train_data)
    train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)

    validation_data = TensorDataset(validation_inputs, validation_masks, validation_labels)
    validation_sampler = SequentialSampler(validation_data)
    validation_dataloader = DataLoader(validation_data, sampler=validation_sampler, batch_size=batch_size)

    #Confirm positive counts
    train_pos_count = sum([int(torch.eq(x[2], 1)) for x in train_data])
    test_pos_count = sum([int(torch.eq(x[2], 1)) for x in validation_data])
    print("Training data has {} positive polarity out of {} samples".format(train_pos_count, len(train_data)))
    print("Testing data has {} positive polarity out of {} samples".format(test_pos_count, len(validation_data)))

    return train_dataloader, validation_dataloader

from transformers import XLNetForSequenceClassification, AdamW

#Load XLNet base model
def loadModel(dropout = .1, summary_dropout = .1):
    print("Loading XLNet sequence classification model...")
    model = XLNetForSequenceClassification.from_pretrained("xlnet-base-cased",
                                                          num_labels = 2,
                                                          dropout = dropout,
                                                          summary_last_dropout = summary_dropout)
    model.cuda() #Set model on GPU
    return model

#Define helper functions

#Accuracy function
def flat_accuracy(preds, labels):
    pred_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return np.sum(pred_flat == labels_flat) / len(labels_flat)

def format_time(elapsed):
    '''
    Takes a time in seconds and returns a string hh:mm:ss
    '''
    # Round to the nearest second.
    elapsed_rounded = int(round((elapsed)))

    # Format as hh:mm:ss
    return str(datetime.timedelta(seconds=elapsed_rounded))

# Commented out IPython magic to ensure Python compatibility.
# %env CUDA_LAUNCH_BLOCKING="1"

from sklearn.metrics import roc_auc_score

def train(model, train_dataloader, validation_dataloader, bsize_iter):
    #Set seed
    seed_val = 2
    random.seed(seed_val)
    np.random.seed(seed_val)
    torch.manual_seed(seed_val)
    torch.cuda.manual_seed_all(seed_val)

    # Store our loss and accuracy for plotting
    train_loss_set = []
    train_acc_set = []
    test_loss_set = []
    test_acc_set = []
    loss_fail = 0

    # trange is a tqdm wrapper around the normal python range
    for i in trange(epochs, desc="Epoch"):

      # Training
      # Set our model to training mode (as opposed to evaluation mode)
      model.train()

      # Tracking variables
      tr_loss = 0
      tr_acc = 0
      steps = 0

      # Train the data for one epoch
      for step, batch in enumerate(train_dataloader):
        # Add batch to GPU
        batch = tuple(t.to(device) for t in batch)
        # Unpack the inputs from our dataloader
        b_input_ids, b_input_mask, b_labels = batch
        # Clear out the gradients (by default they accumulate)
        #optimizer.zero_grad()

        # Forward pass
        outputs = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask, labels=b_labels)
        loss = outputs[0]
        logits = outputs[1]

        #Compute accuracy
        logits = logits.detach().cpu().numpy()
        label_ids = b_labels.to('cpu').numpy()

        tmp_eval_accuracy = flat_accuracy(logits, label_ids)
        tr_acc += tmp_eval_accuracy

        # Backward pass
        loss.backward()

        # Update tracking variables
        tr_loss += loss.item()
        steps += 1

        # Update parameters and take a step using the computed gradient
        # Accumulated gradient: step and clear grad every 8 batches = 64 inputs
        if (step+1) % bsize_iter == 0:
          optimizer.step()
          scheduler.step()
          optimizer.zero_grad()

      avg_tr_loss = tr_loss/steps
      avg_tr_acc = tr_acc/steps
      train_loss_set.append(avg_tr_loss)
      train_acc_set.append(avg_tr_acc)
      print("Train loss: {}".format(avg_tr_loss))
      print("Train accuracy: {}".format(avg_tr_acc))

      # Validation

      # Put model in evaluation mode to evaluate loss on the validation set
      model.eval()

      # Tracking variables
      val_loss, val_acc = 0, 0
      val_labels = []
      val_preds = []
      steps = 0

      # Evaluate data for one epoch
      for batch in validation_dataloader:
        # Add batch to GPU
        batch = tuple(t.to(device) for t in batch)
        # Unpack the inputs from our dataloader
        b_input_ids, b_input_mask, b_labels = batch
        # Telling the model not to compute or store gradients, saving memory and speeding up validation
        with torch.no_grad():
          # Forward pass, calculate loss/logit predictions
          outputs = model(b_input_ids, token_type_ids=None, attention_mask=b_input_mask, labels=b_labels)
          loss = outputs[0]
          logits = outputs[1]

        #Save loss
        val_loss += loss.item()

        #Softmax for probabilities
        probs = F.softmax(logits, dim = 0)

        # Move logits and labels to CPU
        logits = logits.detach().cpu().numpy()
        label_ids = b_labels.to('cpu').numpy()
        probs = probs.detach().cpu().numpy()

        tmp_eval_accuracy = flat_accuracy(logits, label_ids)
        val_acc += tmp_eval_accuracy
        steps += 1

        #Softmax and compute AUC

      avg_val_loss = val_loss/steps
      avg_val_acc = val_acc/steps
      test_loss_set.append(avg_val_loss)
      test_acc_set.append(avg_val_acc)
      print("Validation loss: {}".format(avg_val_loss))
      print("Validation Accuracy: {}".format(avg_val_acc))
      #Check early stopping condition
      if avg_val_loss > avg_tr_loss + .05:
        loss_fail += 1
      else:
        loss_fail = 0
      if loss_fail >= 3:
        print("Early stopping triggered at epoch {}".format(i))
        break

    return train_loss_set, train_acc_set, test_loss_set, test_acc_set

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

plots_path = str(Path(__file__).parent / "../Plots/Tuned_Res_XLNet")
def plotResults(train_loss_set, train_acc_set, test_loss_set, test_acc_set):
    loss_fname = "/bsize_{}_summdp{}_dp{}_optim{}_loss.png".format(bsize, summary_dropout, dropout, optim)
    acc_fname = "/bsize_{}_summdp{}_dp{}_optim{}_accuracy.png".format(bsize, summary_dropout, dropout, optim)

    plt.plot(train_loss_set, 'r--')
    plt.plot(test_loss_set, 'b-')
    plt.legend(['Training Loss', 'Validation Loss'])
    plt.title("Loss by Epoch")
    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.savefig(plots_path + loss_fname)
    plt.clf()

    plt.plot(train_acc_set, 'r--')
    plt.plot(test_acc_set, 'b-')
    plt.legend(['Training Accuracy', 'Validation Accuracy'])
    plt.title("Accuracy by Epoch")
    plt.xlabel("Epoch")
    plt.ylabel("Accuracy")
    plt.savefig(plots_path + acc_fname)
    plt.clf()

from transformers import get_linear_schedule_with_warmup
from torch.optim import RMSprop

#Model settings to try

model_settings_list = [{'bsize_iter':8, 'dropout':0.3, 'summary_dropout':0.3},
                        {'bsize_iter':8, 'dropout':0.5, 'summary_dropout':0.3},
                        {'bsize_iter':16, 'dropout':0.3, 'summary_dropout':0.3},
                        {'bsize_iter':16, 'dropout':0.3, 'summary_dropout':0.2},
                        {'bsize_iter':16, 'dropout':0.3, 'summary_dropout':0.1}]

for params in model_settings_list:
    for optim in ['AdamW', 'RMSprop']:
        params['optim'] = optim

        #Model Parameters
        mini_bsize = 8
        bsize_iter = params["bsize_iter"]
        bsize = mini_bsize * bsize_iter
        dropout = params["dropout"]
        summary_dropout = params["summary_dropout"]


        #Preprocess
        train_inputs, validation_inputs, train_labels, validation_labels, train_masks, validation_masks = preProcess(128, abstracts, labels)

        #Mess with batch size - use gradient accumulation
        train_dataloader, validation_dataloader = loadData(mini_bsize, train_inputs, validation_inputs, train_labels, validation_labels, train_masks, validation_masks)

        model = loadModel(dropout, summary_dropout)

        #Set training parameters
        param_optimizer = list(model.named_parameters())
        no_decay = ['bias', 'gamma', 'beta']
        optimizer_grouped_parameters = [
                      {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)],
                      'weight_decay_rate': 0.01},
                      {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)],
                      'weight_decay_rate': 0.0}
                  ]
        if optim == 'AdamW':
            optimizer = AdamW(optimizer_grouped_parameters,
                            lr = 2e-5,
                            eps = 1e-6)
        if optim == 'RMSprop':
            optimizer = RMSprop(optimizer_grouped_parameters, lr = 2e-5, weight_decay = 0.01)

        epochs = 60 #Solved overfitting with gradient accumulation - now implement early stopping
        total_steps = len(train_dataloader) * epochs
        n_warmup_steps = total_steps * 0.1

        #Create learning rate scheduler
        scheduler = get_linear_schedule_with_warmup(optimizer,
                                                  num_warmup_steps = n_warmup_steps,
                                                  num_training_steps = total_steps)

        train_loss_set, train_acc_set, test_loss_set, test_acc_set = train(model, train_dataloader, validation_dataloader, bsize_iter)
        plotResults(train_loss_set, train_acc_set, test_loss_set, test_acc_set)

        #Evaluate final model AUC
        model.eval()
        with torch.no_grad():
          validation_inputs = validation_inputs.to(device)
          validation_masks = validation_masks.to(device)
          validation_labels = validation_labels.to(device)

          outputs = model(validation_inputs, token_type_ids=None, attention_mask=validation_masks, labels=validation_labels)
          loss = outputs[0]
          logits = outputs[1]

          #Compute probabilities
          probs = F.softmax(logits, dim = 0)

          # Move logits and labels to CPU
          logits = logits.detach().cpu().numpy()
          label_ids = validation_labels.to('cpu').numpy()
          probs = probs.detach().cpu().numpy()
          pos_preds = probs[:,1]

          #Compute accuracy and AUC
          accuracy = flat_accuracy(probs, label_ids)
          auc = roc_auc_score(label_ids, pos_preds)
          print("Final validation accuracy: {}".format(accuracy))
          print("Final validation loss: {}".format(loss.item()))
          print("Final validation AUC: {}".format(auc))
